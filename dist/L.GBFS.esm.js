import{Layer as t,setOptions as i,GeoJSON as n,DivIcon as e,LatLng as s,Marker as o,Icon as a}from"leaflet";const r=new URL("./images/bike_icon.png",document.currentScript.src),h=t.extend({options:{gbfsURL:"",language:null,start:!0,interval:6e4,onlyRunWhenAdded:!1,bikeMarkerColor:"white",bikeMarkerBgColor:"silver",stationMarkerBgColor:"#8C2BF2",showStationPopup:!0,showBikePopup:!0},initialize(t){i(this,t),this.container=new n(null,t),this.updating=!1,this.options.start&&!this.options.onlyRunWhenAdded&&this.start()},async start(){if(this.feeds)return this;try{const t=await fetch(this.options.gbfsURL),i=await t.json();if(this.options.language){if(!Object.prototype.hasOwnProperty.call(i.data,this.options.language))throw new Error(`defined language (${this.options.language}) missing in gbfs file`)}else{const t=Object.keys(i.data);if(0===t.length)throw new Error("GBFS has no languages defined");this.options.language=t[0]}const n=i.data[this.options.language].feeds,e=n.find(t=>"system_information"===t.name),s=await fetch(e.url);this.systemInformation=await s.json();const o=n.find(t=>"station_information"===t.name),a=n.find(t=>"station_status"===t.name),r=n.find(t=>"free_bike_status"===t.name);this.feeds={stationInformation:o,stationStatus:a,freeBikeStatus:r},this.stations={},this.timer||(this.timer=setInterval(()=>this.update(),this.options.interval),this.update())}catch(t){console.warn(t),this.fire("error",{error:t})}return this},stop(){return this.timer&&(clearTimeout(this.timer),delete this.timer),this},isRunning(){return void 0!==this.timer},isUpdating(){return this.updating},async update(){if(void 0===this.feeds)return this;try{let t;this.updating=!0;const i=await fetch(this.feeds.stationStatus.url),n=await i.json();let h,d;if(void 0!==this.feeds.freeBikeStatus){const t=await fetch(this.feeds.freeBikeStatus.url);h=await t.json()}if(void 0!==this.feeds.vehicleTypes){const t=await fetch(this.feeds.vehicleTypes.url);d=await t.json()}this.container.clearLayers();for(const i of n.data.stations)if(i.is_installed){let n=this.stations[i.station_id];if(!n){const e=await fetch(this.feeds.stationInformation.url);t=await e.json(),t.data.stations.forEach(t=>{this.stations[t.station_id]=t}),n=this.stations[i.station_id]}const a=new e({html:this.getStationIconHtml(i.num_bikes_available,i.num_docks_available),bgPos:[16,16],iconSize:[32,32],popupAnchor:[0,-21],className:"station-icon"}),r=new s(n.lat,n.lon),h=new o(r,{icon:a});this.options.showStationPopup&&h.bindPopup(`<b>${n.name}</b><br>Available bikes: <b>${i.num_bikes_available}</b>`),h.on("click",t=>this.fire("stationClick",{event:t,station:n,status:i})),h.addTo(this.container)}const l=new a({iconSize:[32,32],popupAnchor:[0,-20],iconUrl:r});void 0!==h&&h.data.bikes.forEach(t=>{const i=new s(t.lat,t.lon),n=new o(i,{icon:l});this.options.showBikePopup&&n.bindPopup("Bike available"),n.on("click",i=>this.fire("bikeClick",{event:i,bike:t})),n.addTo(this.container)});const c={stationStatus:n};void 0!==t&&(c.stations=t),void 0!==h&&(c.freeBikeStatus=h),void 0!==d&&(c.vehicleTypes=d),this.fire("data",c)}catch(t){this.updating=!1,console.warn(t),this.fire("error",{error:t})}return this.updating=!1,this},getBounds(){if(this.container.getBounds)return this.container.getBounds();throw new Error("Container has no getBounds method")},onAdd(t){t.addLayer(this.container),this.options.start&&this.start()},onRemove(t){this.options.onlyRunWhenAdded&&this.stop(),t.removeLayer(this.container)},getStationIconHtml(t,i){let n=`background: ${this.options.stationMarkerBgColor};`;0===t&&(n=`background: color-mix(in srgb, ${this.options.stationMarkerBgColor} 50%, transparent);`);const e=t/(t+i)*360;let s=`\n      background: ${this.options.bikeMarkerColor};\n      background-image:\n        linear-gradient(${90+e}deg, transparent 50%, ${this.options.bikeMarkerBgColor} 50%),\n        linear-gradient(90deg, ${this.options.bikeMarkerBgColor} 50%, transparent 50%);\n    `;return e>180&&(s=`\n        background: ${this.options.bikeMarkerColor};\n        background-image:\n          linear-gradient(${e-90}deg, transparent 50%, ${this.options.bikeMarkerColor} 50%),\n          linear-gradient(90deg, ${this.options.bikeMarkerBgColor} 50%, transparent 50%);\n      `),`\n      <div class="station-icon-ring" style="${s}">\n        <div class="station-icon-inner" style="${n}">${t}</div>\n      </div>\n    `}});export default h;
//# sourceMappingURL=L.GBFS.esm.js.map
